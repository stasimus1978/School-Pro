generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id   String @id @default(cuid())
  name String
  logo String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many Relationships
  students    Student[]
  classes     Class[]
  parents     Parent[]
  departments Department[]
  streams     Stream[]
  teachers    Teacher[]

  @@map("schools")
}

model Contact {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  phone      String
  school     String   @unique
  country    String
  schoolPage String
  students   Int
  role       String
  media      String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contacts")
}

model Class {
  id    String @id @default(cuid())
  title String
  slug  String @unique

  // Relationships
  streams  Stream[] // One-to-many with Streams
  students Student[] // One-to-many with Students

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add a relation to the School model
  schoolId String // Foreign key to the School model
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("classes")
}

model Stream {
  id    String @id @default(cuid())
  title String
  slug  String @unique

  // Relationships
  classId  String
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  students Student[]
  schoolId String
  school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streams")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String
  role     UserRole
  name     String
  phone    String?
  image    String?

  // School-related fields
  schoolId   String?
  schoolName String?

  // One-to-one relationship
  teacher       Teacher?
  student       Student?
  parent        Parent?
  refreshTokens RefreshToken[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacherId String?
  studentId String?
  parentId  String?

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revoked   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model Parent {
  id            String   @id @default(cuid())
  title         String
  firstName     String
  lastName      String
  relationship  String
  email         String   @unique
  NIN           String   @unique
  gender        String
  dob           DateTime
  phone         String   @unique
  nationality   String
  whatsapNo     String?
  imageUrl      String?
  contactMethod String
  occupation    String
  address       String
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  schoolId   String
  schoolName String
  school     School    @relation(fields: [schoolId], references: [id])
  students   Student[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("parents")
}

model Student {
  id            String   @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  email         String   @unique
  studentType   String?  @default("PS")
  password      String
  imageUrl      String?
  phone         String?
  parentName    String?
  classTitle    String?
  streamTitle   String?
  state         String
  BCN           String   @unique
  nationality   String
  religion      String
  gender        String
  dob           DateTime
  rollNo        String   @unique
  regNo         String   @unique
  admissionDate DateTime
  address       String
  schoolName    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  parentId String
  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)

  classId String
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  streamId String
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  schoolId String
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Personal Information
  title       String
  firstName   String
  lastName    String
  email       String   @unique
  phone       String   @unique
  whatsapNo   String?
  dateOfBirth DateTime
  gender      Gender
  imageUrl    String?
  NIN         String   @unique

  // Authentication
  password      String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  contactMethod String

  // Professional Information
  employeeId    String   @unique
  dateOfJoining DateTime
  designation   String
  mainSubject   String?
  mainSubjectId String?
  qualification String

  // Department Information
  departmentName String
  departmentId   String
  department     Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  // Teaching Information
  subjects   String[]
  classes    String[]
  classesIds String[]

  // Documents
  documents TeacherDocument[]

  // Contact Information
  address     String?
  nationality String

  // Emergency Contact
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?

  // Additional Information
  experience Int?
  bio        String? @db.Text
  skills     String?

  // Relationships
  schoolName String
  schoolId   String
  school     School @relation(fields: [schoolId], references: [id])

  // Attendance & Leave
  attendance TeacherAttendance[]
  leaves     TeacherLeave[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Department {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Information
  name String
  slug String @unique

  // School Relationship
  // schoolId String
  // school   School @relation(fields: [schoolId], references: [id])

  // Head of Department
  hodId        String?
  hodName      String?
  hodStartDate DateTime?

  // Members
  teachers Teacher[]

  // Academic Information
  subjects Subject[]

  // Financial Information
  budget     Float?
  budgetYear String?

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  @@map("departments")
}

model Subject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Information
  name      String
  slug      String  @unique
  code      String
  shortName String?

  // Academic Information
  category     SubjectCategory
  type         SubjectType
  passingMarks Int?
  totalMarks   Int?

  // Department Information
  departmentId   String
  departmentName String
  department     Department @relation(fields: [departmentId], references: [id])

  // Relationships
  // schoolId String
  // school   School @relation(fields: [schoolId], references: [id])

  // Additional Settings
  isActive     Boolean @default(true)
  isOptional   Boolean @default(false)
  hasTheory    Boolean @default(true)
  hasPractical Boolean @default(false)

  // If practical is enabled
  labRequired Boolean @default(false)

  @@map("subjects")
}

model TeacherDocument {
  id String @id @default(cuid())

  // Relationships
  teacherId  String
  teacher    Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  type       DocumentType
  title      String
  url        String
  uploadedAt DateTime     @default(now())

  @@index([teacherId])
  @@map("teacher_documents")
}

model TeacherAttendance {
  id String @id @default(cuid())

  // Relationships
  teacherId String
  teacher   Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  date      DateTime
  status    AttendanceStatus
  checkIn   DateTime?
  checkOut  DateTime?
  note      String?

  @@unique([teacherId, date])
  @@index([teacherId])
  @@map("teacher_attendances")
}

model TeacherLeave {
  id String @id @default(cuid())

  // Relationships
  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  startDate  DateTime
  endDate    DateTime
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?

  @@index([teacherId])
  @@map("teacher_leaves")
}

// All enums 
enum SubjectCategory {
  CORE
  ELECTIVE
  ADDITIONAL
  VOCATIONAL
  LANGUAGE
  EXTRA_CURRICULAR
}

enum SubjectType {
  THEORY
  PRACTICAL
  BOTH
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum DocumentType {
  RESUME
  CERTIFICATE
  ID_PROOF
  QUALIFICATION
  CONTACT
  OTHER
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_LEAVE
}

enum LeaveType {
  SICK
  CASUAL
  VACATION
  MATERNITY
  PATERNITY
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  STUDENT
  PARENT
}
