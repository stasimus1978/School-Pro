generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id   String @id @default(cuid())
  name String
  logo String
  slug String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  // students Student[] // One-to-many with Students
  // classes  Class[] // One-to-many with Classes
  // parents  Parent[] // One-to-many with Parents
  // streams  Stream[] // One-to-many with Streams

  @@map("schools")
}

model Contact {
  id         String   @id @default(cuid())
  fullName   String
  email      String   @unique
  phone      String
  school     String   @unique
  country    String
  schoolPage String
  students   Int
  role       String
  media      String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contacts")
}

model Class {
  id    String @id @default(cuid())
  title String
  slug  String @unique

  // Relationships
  streams  Stream[] // One-to-many with Streams
  students Student[] // One-to-many with Students

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add a relation to the School model
  // schoolId String // Foreign key to the School model
  // school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@map("classes")
}

model Stream {
  id    String @id @default(cuid())
  title String
  slug  String @unique

  // Relationships
  classId  String
  class    Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  students Student[]
  // schoolId String
  // school   School    @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streams")
}

model Parent {
  id            String   @id @default(cuid())
  title         String
  firstName     String
  lastName      String
  relationship  String
  email         String   @unique
  NIN           String   @unique
  gender        String
  dob           DateTime
  phone         String   @unique
  nationality   String
  whatsapNo     String?
  imageUrl      String?
  contactMethod String
  occupation    String
  address       String
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  // schoolId String
  // school   School    @relation(fields: [schoolId], references: [id])
  students Student[]

  @@map("parents")
}

model Student {
  id            String   @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  email         String   @unique
  studentType   String?  @default("PS")
  password      String
  imageUrl      String?
  phone         String?
  parentName    String?
  classTitle    String?
  streamTitle   String?
  state         String
  BCN           String   @unique
  nationality   String
  religion      String
  gender        String
  dob           DateTime
  rollNo        String   @unique
  regNo         String   @unique
  admissionDate DateTime
  address       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  parentId String
  parent   Parent @relation(fields: [parentId], references: [id], onDelete: Cascade)
  classId  String
  class    Class  @relation(fields: [classId], references: [id])
  streamId String
  stream   Stream @relation(fields: [streamId], references: [id])
  // schoolId String
  // school   School @relation(fields: [schoolId], references: [id])

  @@map("students")
}
